/* storyboard.js
 * 
 * Keep track of sailors using RFID wristbands
 *
 * Optimized for Zebra EM45 Android screen
 * https://www.zebra.com/us/en/products/spec-sheets/mobile-computers/handheld/em45-rfid.html
 * Screen is 2400x1080, mock up is 1/4 resolution (1200x540)
 *
 * There are a lot of ways to build web pages. In this project a few elements come from the
 * base HTML page and the rest are dynamically generated by javascript. It would be just as
 * valid to have more scenes in the HTML and hide/show them using the display property. The
 * current implementation may make the garbage collector work harder but overall it's pretty
 * small and shouldn't be a long-term reliability issue.
 *
 */
var Regatta = null;
var Sailors = null;

const statusLabels = {
    "On the water": "Sailing",
    "On shore": "Shore",
    "Unknown": "Unknown",
    "None": "Unknown",
    "": "Unknown"
}

let allStatusClasses = ["atsea", "onshore", "unknown", "status"];
const statusClasses = {
    "On the water": "atsea",
    "On shore": "onshore",
    "Unknown": "unknown",
    "None": "unknown",
    "": "unknown"
}

const sailorFields = {}
const sailorFieldLabels = {
    "First Name": "First",
    "Last Name": "Last",
    "Sail Number": "Sail",
    "Class": "Class",
    "Status": "Status",
    "Last Updated": "Last",
    "Wristbands": "Tags"
};

let currentMode = null;

let pointerState = {};

function changeSailorStatus(row, status) {
    // This is where an external database update would happen
    const statusIndex = sailorFields["Status"]
    Sailors.data[row][statusIndex] = status;

    const now = new Date();
    const time = now.format("mmm d yyyy, h:MM TT");
    const timeIndex = sailorFields["Last Updated"];
    Sailors.data[row][timeIndex] = time;
    
    for (const el of document.getElementsByClassName(`status-${row}`)) {
	el.classList.remove("atsea", "onshore", "unknown");
	el.classList.add(statusClasses[status]);
	el.innerHTML = statusLabels[status];
    }

    for (const el of document.getElementsByClassName(`timestamp-${row}`)) {
	el.innerHTML = time;
    }
    
    const unused = statusSummary();
}

function scanned(row) {
    const sailor = Sailors.data[row];
	
    const first = sailor[sailorFields["First Name"]];
    const last = sailor[sailorFields["Last Name"]];
    const sailNumber = sailor[sailorFields["Sail Number"]];
    const sailClass = sailor[sailorFields["Class"]];
    const timestamp = sailor[sailorFields["Last Updated"]];
    let status =  sailor[sailorFields["Status"]];
    if (status == "") status = "Unknown";

    let div;
    const sceneWrap = document.getElementById("sceneWrap");
    sceneWrap.innerHTML = "";
    sceneWrap.classList.remove("atsea", "onshore", "unknown", "status");
    sceneWrap.classList.add(statusClasses[status]);

    const scene = document.createElement("div");
    scene.id = "scanned";
    scene.classList.add("scannedArea");
    
    sceneWrap.appendChild(scene);

    const ss = document.createElement("div");
    ss.innerHTML = "";
    scene.appendChild(ss);

    const fields = [`${status}`, '&nbsp;', `${first} ${last}`, `Class: ${sailClass}`, `Sail/Bib: ${sailNumber}`, `${timestamp}`];
    for (f of fields) {
	div = document.createElement("div");
	div.innerHTML = f;
	//div.classList.add(statusClasses[status]);
	ss.appendChild(div);
    }
    
    // Spacer div to allow Change Status button to get pushed to bottom
    div = document.createElement("div");
    scene.appendChild(div);
    
    div = document.createElement("div");
    div.innerHTML = "Change Status";
    div.classList.add("button");
    div.classList.add("neutral");
    div.sailorRow = row;
    div.addEventListener("click", changeStatusManually);
    scene.appendChild(div);
}

function genStatusSummary() {
    const summaryBar = document.createElement("div");
    summaryBar.classList.add("statusSummary");
    for (const ff of [["atsea", `<div>Sailing</div><div class="count-otw"></div>`],
		      ["onshore", `<div>Shore</div><div class="count-onshore"></div>`],
		      ["unknown", `<div>Unknown</div><div class="count-unknown"></div>`]]) {
	const div = document.createElement("div");
	div.classList.add("statusItem", ff[0]);
	span = document.createElement("span");
	span.innerHTML = ff[1];
	div.appendChild(span);
	summaryBar.appendChild(div);
    }
    return summaryBar;
}

/* scan() is a stub for scanning an RFID tag. To simulate we choose a random sailor
 * the csv file uses lines 0 & 1 for event name and column titles so sailors start
 * on line 2.
 *
 * A real scanner would find the db record (or table index) with the matching tag
 */
function scan() {
    console.log(`Scan clicked current mode ${currentMode}`);

    let sailorRow = Math.floor(Math.random()*(Sailors.data.length - 2)) + 2;

    if (currentMode == "CheckOut") changeSailorStatus(sailorRow, "On the water");
    if (currentMode == "CheckIn") changeSailorStatus(sailorRow, "On shore");

    scanned(sailorRow);
}

function checkOut() {
    const screen = document.getElementById("screen");
    screen.classList.remove("atsea", "onshore", "checking", "status");
    screen.classList.add("atsea");

    const mode = document.getElementById("currentMode");
    mode.innerHTML = "Checking Out";

    const sceneWrap = document.getElementById("sceneWrap");
    sceneWrap.innerHTML = "";
    sceneWrap.classList.remove("atsea", "onshore", "unknown", "status");
    
    const scene = document.createElement("div");
    scene.id = "scene";
    scene.classList.add("scannedArea");
    sceneWrap.appendChild(scene);

    const div = document.createElement("div");
    div.innerHTML = "<p>Checking Out...</p><p>Press Button to Scan</p>";
    scene.appendChild(div);

    const scan = document.getElementById("scan");
    scan.classList.remove("hidden");
    currentMode = "CheckOut";
}

function checkIn() {
    const screen = document.getElementById("screen");
    screen.classList.remove("atsea", "onshore", "checking", "status");
    screen.classList.add("onshore");

    const mode = document.getElementById("currentMode");
    mode.innerHTML = "Checking In";

    const sceneWrap = document.getElementById("sceneWrap");
    sceneWrap.innerHTML = "";
    sceneWrap.classList.remove("atsea", "onshore", "unknown", "status");

    const scene = document.createElement("div");
    scene.id = "scene";
    scene.classList.add("scannedArea");
    /*screen.classList.add("onshore");*/
    sceneWrap.appendChild(scene);

    const div = document.createElement("div");
    div.innerHTML = "<p>Checking In...</p><p>Press Button to Scan</p>";
    scene.appendChild(div);

    const scan = document.getElementById("scan");
    scan.classList.remove("hidden");

    currentMode = "CheckIn";
}

function changeStatusManually(e) {
    let action = null;
    let div;
    const target = e.target;
    const sailorRow = target.sailorRow;
    const s = Sailors.data[sailorRow];

    function enableConfirm(e) {
	let div;
	el = e.target;
	action = el.sailorAction;
	console.log(`changeStatus row ${sailorRow} to ${action}`);

	div = document.getElementById("modalName");
	div.classList.remove("atsea", "onshore", "unknown");
	div.classList.add(statusClasses[action]);

	div = document.getElementById("modalStatus");
	div.classList.remove("atsea", "onshore", "unknown");
	div.classList.add(statusClasses[action]);
	div.innerHTML = `${statusLabels[action]}`;
    }

    function confirm(e) {
	el = e.target;
	if (el.innerHTML == "OK") {
	    console.log(`confirm changeStatus row ${sailorRow} to ${action}`);
	    changeSailorStatus(sailorRow, action);
	    if (currentMode == "CheckIn" || currentMode == "CheckOut" || currentMode == "CheckTag") {
		scanned(sailorRow);
	    }
	}
	dialog.close();
    }

    console.log(`Change status for row ${sailorRow}`);

    const status = s[sailorFields["Status"]];

    const dialog = document.getElementById("dialog");
    dialog.innerHTML = "";
    div = document.createElement("div");
    div.id = "modalName";
    div.classList.add(statusClasses[status]);
    const first = s[sailorFields["First Name"]];
    const last = s[sailorFields["Last Name"]];
    div.innerHTML = `${first} ${last}`;
    dialog.appendChild(div);

    div = document.createElement("div");
    dialog.appendChild(div);
    div.id = "modalStatus";
    div.classList.add(statusClasses[status]);
    div.innerHTML = `${statusLabels[status]}`;

    div = document.createElement("div");
    dialog.appendChild(div);
    div.innerHTML = "<span>&nbsp;</span>";
    
    div = document.createElement("div");
    dialog.appendChild(div);
    div.innerHTML = "Change To";

    for (const status of ["On the water", "On shore", "Unknown"]) {
	div = document.createElement("div");
	div.classList.add("button", "modalButton", statusClasses[status]);
	div.innerHTML = `${statusLabels[status]}`;
	div.addEventListener("click", enableConfirm);
	div.sailorRow = sailorRow;
	div.sailorAction = status;
	dialog.appendChild(div);
    }
    
    div = document.createElement("div");
    dialog.appendChild(div);
    div.innerHTML = "<span>&nbsp;</span>";
    
    const confirmBar = document.createElement("div");
    confirmBar.classList.add("modalConfirm");
    dialog.appendChild(confirmBar);

    for (const label of ["Cancel", "OK"]) {
	div = document.createElement("div");
	div.classList.add("button");
	div.classList.add("neutral");
	div.classList.add("modalButton");
	div.innerHTML = label;
	div.addEventListener("click", confirm);
	confirmBar.appendChild(div);
    }
    
    dialog.showModal();
}

function genStatusTable() {
    const statusFields = ["Status", "Last Name", "First Name", "Sail Number", "Class", "Last Updated", "Wristbands"];
    
    const statusTable = document.createElement("table");
    statusTable.classList.add("sortable");

    const thead = document.createElement("thead");
    statusTable.appendChild(thead);
    const header = document.createElement("tr");
    thead.appendChild(header);
    for (let f of statusFields) {
	const colHeader = document.createElement("th");
	header.appendChild(colHeader);
	const button = document.createElement("button");
	colHeader.appendChild(button);
	button.innerHTML = `${sailorFieldLabels[f]}<span aria-hidden="true"></span>`;
    }

    const tbody = document.createElement("tbody");
    statusTable.appendChild(tbody);
    
    for (var s = 2; s < Sailors.data.length; s++) {
	sailor = Sailors.data[s];
	const row = document.createElement("tr");
	tbody.appendChild(row);
	for (f of statusFields) {
	    const data = document.createElement("td");
	    row.appendChild(data);
	    let field = sailor[sailorFields[f]];
	    if (f == "Status") { // Status element can be clicked on
		data.sailorRow = s; // stash row for manual status change
		data.classList.add("statusButton");
		data.classList.add(statusClasses[field]);
		data.classList.add(`status-${s}`);
		field = statusLabels[field];
		data.addEventListener("click", changeStatusManually);
	    }
	    if (f == "Last Updated") {
		data.classList.add(`timestamp-${s}`);
	    }
	    data.innerHTML = field;
	}
    }
    new SortableTable(statusTable);

    return(statusTable);
    //fitText(document.getElementById("scene"), 0.4);
}

function statusSummary() {
    let onTheWater = 0;
    let onShore = 0;
    let unknown = 0;

    // Can be called at init time before data is loaded
    if (!Sailors) return;

    for (s = 2; s <  Sailors.data.length; s++) {
	const sailor = Sailors.data[s];
	const status = sailor[sailorFields["Status"]];
	if (status == "On the water") {
	    onTheWater++;
	} else if (status == "On shore") {
	    onShore++;
	} else {
	    unknown++;
	}
    }
    
    for (const el of document.getElementsByClassName("count-otw"))
	el.innerHTML = onTheWater;

    for (const el of document.getElementsByClassName("count-onshore"))
	el.innerHTML = onShore;

    for (const el of document.getElementsByClassName("count-unknown"))
	el.innerHTML = unknown;
    
    return({"On the water": onTheWater, "On shore": onShore, "Unknown": unknown});
}
    
function status() {
    const screen = document.getElementById("screen");
    screen.classList.add("status");
    screen.classList.remove("atsea", "onshore", "checking");

    const mode = document.getElementById("currentMode");
    mode.innerHTML = "Status";

    const sceneWrap = document.getElementById("sceneWrap");
    sceneWrap.innerHTML = "";
    const outer = document.createElement("div");
    outer.id = "statusTableOuter";
    outer.classList.add("statusTableOuter");
    sceneWrap.appendChild(outer);

    const inner = document.createElement("div");
    inner.id = "statusTableInner";
    inner.classList.add("statusTableInner");
    outer.appendChild(inner);
    
    const statusTable = genStatusTable();
    statusTable.id = "statusTable";
    statusTable.classList.add("statusTable");
    inner.appendChild(statusTable);

    const scan = document.getElementById("scan");
    scan.classList.add("hidden");
    currentMode = "Status";

    checkResize();
}

function checkTag() {
    const screen = document.getElementById("screen");
    screen.classList.remove("atsea", "onshore", "checking", "status");
    screen.classList.add("checking");

    const mode = document.getElementById("currentMode");
    mode.innerHTML = "Check Tags";

    const sceneWrap = document.getElementById("sceneWrap");
    sceneWrap.innerHTML = "";
    sceneWrap.classList.remove("atsea", "onshore", "unknown", "status");
    
    const scene = document.createElement("div");
    scene.id = "scene";
    scene.classList.add("scannedArea");
    sceneWrap.appendChild(scene);
    
    const div = document.createElement("div");
    div.innerHTML = "<p>Check Tags...</p><p>Press Button to Scan</p>";
    scene.appendChild(div);

    const scan = document.getElementById("scan");
    scan.classList.remove("hidden");
    currentMode = "CheckTag";
}

const modeMenuItems = [
    { "label": "Check Out", "action": checkOut},
    { "label": "Check In", "action": checkIn },
    { "label": "Check Tag", "action": checkTag},
    { "label": "Status", "action": status},
];

function createModeMenu() {
    const m = document.getElementById("modeMenuContent");
    for (let e of modeMenuItems) {
	let i = document.createElement("div");
	i.innerHTML = e.label;
	i.addEventListener("click", e.action);
	m.appendChild(i);
    }
}

function updateClock() {
    const now = new Date();
    const time = now.format("HH:MM");
    const clock = document.getElementById("clock");
    clock.innerHTML = time;
}

function regattaLoaded(sailors) {
    // PapaParse is returning an extra row
    if (sailors.data[sailors.data.length-1].length == 1) {
	const u = sailors.data.pop();
	console.log("Deleting last row");
    }
    Sailors = sailors;

    var column = 0;
    for (var f of Sailors.data[1]) {
	if (f == " ") f = "Row";
	sailorFields[f] = column;
	column++;
    }
    
    console.log(`Loaded regatta ${Regatta.label}`);
    statusSummary();
}

function checkResize() {
    const minFont = 9;
    let screenHeightInLines = 75;
    screenHeightInLines = 66;
    /* When the window is 900px high, font-size is 12px
    const targetAspectRatio = 9/16;
    const fontAspectRatio = 0.519; /* From a google search */
    /*const fontAspectRatio = 0.46; /* https://dbaron.org/css/fonts/aspect_results */

    const fontAspectRatio = 0.519; /* From a google search */
    const viewportWidth = window.innerWidth;
    const viewportHeight = window.innerHeight;

    let fHeight = viewportHeight / screenHeightInLines;
    let fWidth = viewportWidth / (screenHeightInLines * fontAspectRatio);

    /*let target = Math.floor(Math.max(Math.min(fHeight, fWidth), 8));*/
    let target = Math.max(Math.min(fHeight, fWidth), 8);

    const html = document.querySelector('HTML');
    const fontSizeString = html.style.fontSize;
    let currentFontSize = parseFloat(fontSizeString.substring(0, fontSizeString.lastIndexOf("px")));
    if (!currentFontSize) currentFontSize = 0;
    if (currentFontSize != target) {
	console.log(`Font size: ${currentFontSize} -> ${target}`);
	html.style.fontSize = `${target}px`;
    }
    
    const statusTableInnerClass = document.getElementsByClassName("statusTableInner");
    if (statusTableInnerClass.length > 0) {
	const statusTableInner = statusTableInnerClass[0];
    
	let w = statusTableInner.scrollWidth;
	if (!w) w = 0;
	const newW = window.innerWidth - 5;
	
	if (Math.abs(w-newW) > 2) {
	    //console.log(`innerTable width ${w} ->  ${newW}`);
	    statusTableInner.style.width = `${newW}px`;
	}

	let h = statusTableInner.scrollHeight;
	const newH = window.innerHeight; /* a little bit of margin */
	statusTableInner.style.height = `calc(${newH}px - calc(17rem))`;
    }
}

function touch2Mouse(e) {
    const t = e.target;
    //console.log(`Touch2mouse ${t.id}`);
}

function initialize() {
    let queryString = window.location.search;
    const urlParams = new URLSearchParams(queryString);
    let regatta = urlParams.get('regatta');

    if (!isNaN(regatta)) regatta = parseInt(regatta,10);
    if (isNaN(regatta)) regatta = 0;
    if (regatta > config.regattas.length) regatta = 0;
    
    const href = window.location.href;

    // Set the app to what ever state is the first pull down menu item
    modeMenuItems[0].action();
    createModeMenu();

    const summaryContainer = document.getElementById("summaryBar");
    const summary = genStatusSummary();
    summaryContainer.appendChild(summary);
    summaryCounts = statusSummary();

    const b = document.getElementById("scan");
    b.addEventListener("click", scan);

    /* adding these listeners somehow enables "click" events on
     * touch devices even though touch2Mouse doesn't do anything.
     */
    document.addEventListener("touchstart", touch2Mouse, true);
    document.addEventListener("touchmove", touch2Mouse, true);
    document.addEventListener("touchend", touch2Mouse, true);

    const intervalID = setInterval(updateClock, 1000);

    Regatta = config.regattas[regatta];

    document.getElementById("regatta").innerHTML = Regatta.label;

    const url = `${href.substring(0, href.lastIndexOf("/"))}/${Regatta.file}`;
    console.log(`Loading regatta ${regatta} ${Regatta.label} from ${url}`);
    Papa.parse(url, {
	download: true,
	complete: regattaLoaded
    });

    window.addEventListener('resize', checkResize);
    checkResize();
}

//window.addEventListener('DOMContentLoaded', initialize);
window.addEventListener('load', initialize);
